$Id: README,v 1.2 2000/05/02 16:12:58 marvin Exp $

 XOR Cipher implementation and breaking 0.1

    By Marvin (marvin@nss.nu)


Introduction
------------
Every amateur cryptographer (that I've met) has at one point implemented some
version of XOR encryption. Some thinking that it's completely secure, others
did it just for fun. The truth is, of course, that it's pathetically unsecure.
It's been many years since I first implemented XOR encryption, and then it
was just with an 8-bit key. Here's a variable key-length implementation and a
program for breaking using a ciphertext-only attack (known/chosen
plaintext/ciphertext is so trivial I broke them when I first implemented the
8-bit version with them when I was eight).
This program was inspired by the excellent book 'Applied cryptography' by Bruce
Schneier. ISBN 0-471-11709-9 or 0-471-12845-7. Buy it, read it. Love it.

Although XOR 'encryption' is trivially broken I have never seen a program for
automatically breaking it, so I made one myself.

Algorithms
----------
To find out what length the password is the ciphertext is XOR-ed against itself
with different shifts (see XOR_analyze::coincidence() in analyze.cc) and the
number of zeroes (equal bytes) are counted. This is called counting
coincidences. When the number of zeroes is high the shift value is potentially
a multiple of the key length. The one that stands out most is checked with
statistics (with a frequency table) to get the key. To check with statistics on
all key-lengths in key-length interval (-m and -M) use -a with xor-analyze.

Compiling
---------
Type 'make'. Mail me if it doesn't compile with error messages and don't forget
to tell me what kind of system you have.

Encryption
----------
./xor-enc secret file.txt file.xor

Where:
secret   = the password
file.txt = input plaintext filename
file.xor = output 'ciphertext' filename

Decryption
----------
Same as encryption

Cryptanalyzing (cracking/breaking)
----------------------------------
'./xor-analyze -h' will give you some help.
All tests will work (are successfully cryptanalyzed) without parameters.

Frequency table generation
--------------------------
The frequency table generator is in tests/freq.c.xor.
You need to crack the file to get it. Use the frequency table already generated
from my patched Linux source in freq/linux-2.2.14-int-m0.freq.

To generate freq/linux-2.2.14-int-m0.freq I used:
find /usr/src/linux -name "*.[ch]" | ./freq > freq/linux-2.2.14-int-m0.freq

Note that this does *not* represent average C-code.

License
-------
It's all GPL, see the LICENSE file.

-------------------------------------------------------------------------------
Send questions/suggestions/patches/rants/money/sparcs/whatever to marvin@nss.nu
